
#!usr/bin/env python
# -*- coding:utf-8 _*-
"""
@version:
author:iptL
@time: 2021/01/19
@file: leak.py
@function:
@modify:
"""
import gmpy2
from z3 import *
from Crypto.Util.number import long_to_bytes


if __name__ == "__main__":
    k = 5535722692962580764045545539105119140941061679289569420988353884209653851308860058948669740693107863231179565602072744542122031789184119031739723962825082929025825322421201364211726001366490949760887367407718763255964735567971493859197583624076478457865073449246835949075135223468616834636386958924709024763349115622062848212445867198457630368236782421195503713107838541903829979118327675371550868768159024260793541264335548489228744367609071659968450303895118817379316060805148754136917043160175570565717388336822960389664337656603584425629662613786203920234401824957121860225422901340950436355650311392398098947210940
    dp = 3272293505696712831419859641571956066667516012597886098021642320155056349966612629986261146617139998624603483170466852538289743936225789351270153550594329
    c = 22524257534087703614496632403022329621384173069680778965750290698059674588465640878754707363673789674111671270645152584118206145007310499274423606886261969807360070526126452646719628307689968971699215841867636770320159256301550908771135042912287955209485328267670825390080110910391913063177323585204392804538642393453388536211144485389902591029350060800993352969569703901717308330574394200996651534321547814313195218895547718815009876393987398738932001924661338796059973950012706427109598830049455186171345179840564502215531573714428772608739268313985559628612004439028014417408631851880698512023740903181116906766066951473942201698375224240271523568161242951730224901227589413731025281719101368668617497947995579443908773425555177346524678673641140157885033923288401884
    r = 4
    e = 0x10001

    solver1 = Solver()
    x1 = Int("x1")
    solver1.add(2019 * x1 ** 2 + 2020 * x1 ** 3 + 2021 * x1 ** 4 == k)
    if solver1.check() == sat:
        m = solver1.model()
        p = m[x1].as_long()
        print(p)

    mp1 = pow(c, dp, p)
    print(long_to_bytes(mp1))
    mp = pow(c, dp - 1, p)
    for i in range(1, r - 2):
        x = pow(c - pow(mp1, e), 1, p ** (i + 1))
    y = pow(x * mp * (gmpy2.invert(e, p)), 1, p ** (i + 1))
    mp1 = mp1 + y
    print(long_to_bytes(mp1))

